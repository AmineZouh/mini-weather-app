{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class WeatherService {\n  constructor(http) {\n    this.http = http;\n  }\n  getWeather(city) {\n    const options = new HttpParams().set('units', 'metric').set('q', city).set('appId', environment.apiKey);\n    return this.http.get(environment.apiUrl + 'weather', {\n      params: options\n    });\n  }\n}\nWeatherService.ɵfac = function WeatherService_Factory(t) {\n  return new (t || WeatherService)(i0.ɵɵinject(i1.HttpClient));\n};\nWeatherService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WeatherService,\n  factory: WeatherService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,UAAU,QAAQ,sBAAsB;AAG7D,SAASC,WAAW,QAAQ,8BAA8B;;;AAK1D,OAAM,MAAOC,cAAc;EAEzBC,YAAoBC,IAAe;IAAf,SAAI,GAAJA,IAAI;EAAe;EAEvCC,UAAU,CAACC,IAAY;IAEvB,MAAMC,OAAO,GAAG,IAAIP,UAAU,EAAE,CAE7BQ,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC,CAEtBA,GAAG,CAAC,GAAG,EAAEF,IAAI,CAAC,CAEdE,GAAG,CAAC,OAAO,EAAEP,WAAW,CAACQ,MAAM,CAAC;IAEnC,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAUT,WAAW,CAACU,MAAM,GAE9C,SAAS,EAAE;MAAEC,MAAM,EAAEL;IAAO,CAAE,CAAC;EAEnC;;AAlBaL,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAW,SAAdX,cAAc;EAAAY,YAFb;AAAM","names":["HttpParams","environment","WeatherService","constructor","http","getWeather","city","options","set","apiKey","get","apiUrl","params","factory","providedIn"],"sourceRoot":"","sources":["D:\\Projets\\Angular projects\\weather-app\\src\\app\\weather.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Weather } from './weather';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WeatherService {\n\n  constructor(private http:HttpClient) { }\n\n  getWeather(city: string): Observable<Weather> {\n\n  const options = new HttpParams()\n\n    .set('units', 'metric')\n\n    .set('q', city)\n\n    .set('appId', environment.apiKey);\n\n  return this.http.get<Weather>(environment.apiUrl +\n\n    'weather', { params: options });\n\n}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}